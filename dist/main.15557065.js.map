{"version":3,"sources":["main.js"],"names":["div","dom","create","console","log","after","test","div3","wrap","nodes","empty","window","attr","text","style","border","color","class","add","remove","has","fn","on","off","testDiv","find","test2","parent","siblings","next","s2","previous","t","each","children","n","index"],"mappings":";AACA,IAAMA,EAAMC,IAAIC,OAAO,qBACvBC,QAAQC,IAAIJ,GA0BZC,IAAII,MAAMC,KAAMN,GAGhB,IAAMO,EAAON,IAAIC,OAAO,2BACxBD,IAAIO,KAAKR,EAAKO,GAGd,IAAME,EAAQR,IAAIS,MAAMC,OAAOD,OAC/BP,QAAQC,IAAIK,GAMZR,IAAIW,KAAKN,KAAM,QAAS,gBACxBH,QAAQC,IAAIH,IAAIW,KAAKN,KAAM,UAG3BL,IAAIY,KAAKP,KAAM,QACfL,IAAIY,KAAKP,MAGTL,IAAIa,MAAMR,KAAM,CAACS,OAAQ,gBAAiBC,MAAO,SAGjDb,QAAQC,IAAIH,IAAIa,MAAMR,KAAM,WAE5BL,IAAIa,MAAMR,KAAM,SAAU,mBAK1BL,IAAIgB,MAAMC,IAAIZ,KAAM,OACpBL,IAAIgB,MAAMC,IAAIZ,KAAM,QACpBL,IAAIgB,MAAME,OAAOb,KAAM,QACvBH,QAAQC,IAAIH,IAAIgB,MAAMG,IAAId,KAAM,SAMhC,IAAMe,EAAK,WACPlB,QAAQC,IAAI,QAEhBH,IAAIqB,GAAGhB,KAAM,QAASe,GAEtBpB,IAAIsB,IAAIjB,KAAM,QAASe,GAEvB,IAAMG,EAAUvB,IAAIwB,KAAK,SAAS,GAClCrB,IAAIoB,GASJ,IAAME,EAAQzB,IAAIwB,KAAK,UAAU,GACjCrB,IAAIH,IAAIwB,KAAK,OAAQC,GAAO,IAG5BvB,QAAQC,IAAIH,IAAI0B,OAAO1B,IAAIwB,KAAK,SAAS,KAGzCrB,IAAIH,IAAI2B,SAAS3B,IAAIwB,KAAK,OAAO,KAIjCrB,IAAIH,IAAI4B,KAAKC,KACb1B,IAAIH,IAAI4B,KAAK5B,IAAIwB,KAAK,OAAO,KAG7BrB,IAAIH,IAAI8B,SAASD,KAGjB,IAAME,EAAI/B,IAAIwB,KAAK,WAAW,GAC9BrB,IAAI4B,GACJ/B,IAAIgC,KAAKhC,IAAIiC,SAASF,GAAI,SAACG,GAAIlC,OAAAA,IAAIa,MAAMqB,EAAG,QAAS,YAGrD/B,IAAIH,IAAImC,MAAMN","file":"main.15557065.js","sourceRoot":"../src","sourcesContent":["// 由于 dom 直接定义在 window 上，所以\nconst div = dom.create(\"<div>newDiv</div>\")\nconsole.log(div)\n// 控制台报错，dom 没有定义\n// 原来是没有引入，注意引入顺序 dom.js 是应该在 main.js 之上\n// 引入之后打印出了 div 标签\n// 但是还是不够方便，比如我想要在 div>span>1 就需要写 3 句代码\n// const span = dom.create('span')\n// div.appendChild(span)\n// 太麻烦，能不能这样 const div = dom.create('<div><span>1</span></div>')\n// 这个怎么做呢，dom 好像没有给接口啊\n// 网上搜索的经验\n// 传入的参数就写成这样的与 HTML 标签一样的字符串\n// create(string) {\n//  const container = document.createElement(\"div\") \n//  container.innerHTML = string\n//  return container.children[0]\n// }\n// OK，显示出来了\n// 但是试了一下 dom.create(\"<td>hi</td>\")\n// 打印出了 undefined，因为容器是一个 div，里面是不能装 td 的，td 只能出现在 table/tbody/tr 元素里面，不符合 HTML 语法\n// 那怎么办呢，有什么标签是放任何元素都不出错的呢\n// template 标签，它不用来显示，专门用来容纳的\n// 但是如果你使用 template 的话，里面的元素你不能用 children 来获取\n// 需要这样获取 return container.content.firstChild\n// 另外字符串最好 trim 一下，否则之前有空格就完啦，就是把字符串两边的空格去掉\n// 因为你传的字符串里面前面有空格的话，第一个元素就是文本元素，firstChild 就是那个文本\n// OK，用于创建节点的 create 就写完了\ndom.after(test, div)\n\n// 实验一下 dom.wrap\nconst div3 = dom.create('<div id=\"parent\"></div>')\ndom.wrap(div, div3)\n\n// 测试 empty\nconst nodes = dom.empty(window.empty)\nconsole.log(nodes)\n// 发现竟然打印了第4个数组元素，是 undefined，只有 3 个节点啊\n// 修改过后我们发现，打印出它的 7 个儿子，其中四个回车的文本儿子\n// 是对的，移除的时候，文本节点肯定也是想移除的啊\n\n// 测试 attr\ndom.attr(test, 'title', 'Hi, I am Hao')\nconsole.log(dom.attr(test, 'title'))\n\n// 测试 text\ndom.text(test, '新的内容')\ndom.text(test)\n\n// 测试 style\ndom.style(test, {border: '1px solid red', color: 'blue'})\n// 这样写，比我们直接写字符串要舒服多了，后面还能追加\n// 那如果只是想读属性呢，2 个参数\nconsole.log(dom.style(test, 'border'))\n// 什么参数也是 3 个的不一样的设置\ndom.style(test, \"border\", \"5px solid black\")\n// 继续分情况判断\n\n// 在 HTML 页面里添加样式\n// 然后，测试 class.add\ndom.class.add(test, 'red')\ndom.class.add(test, 'blue')\ndom.class.remove(test, 'blue')\nconsole.log(dom.class.has(test, 'blue'))\n\n// 测试 on 和 off\n// dom.on(test, 'click', ()=>{\n//     console.log('点击了')\n// })\nconst fn = () => {\n    console.log('点击了')\n}\ndom.on(test, 'click', fn)\n// 要移除的时候发现问题，你得在添加的时候给事件函数一个名字，不然没法移除啊\ndom.off(test, 'click', fn)\n\nconst testDiv = dom.find('#test')[0]\nlog(testDiv)\n// 有一个问题，我只想在 test 里面找 .red，不想在 test2 里面找 .red\n// 比如 dom.find('.red', test2)，我只想在哪里找，默认是在 document 里面找的，第二个参数给一个范围\n// 好，在实现函数里面加第二个参数 scope\n\n// 注意，下面的写下面的第一句，然后后面参数改为 test2\n// 是因为之前在测试 empty 的时候干掉了 test 里面的 p\n// 所以我们在测试的时候，最好每个测试用单独的 div，不然相互之间会有影响的\n// 因为如果没有上面的 empty 操作的影响，我们可以直接写成 log(dom.find('.red', testDiv))\nconst test2 = dom.find('#test2')[0]\nlog(dom.find('.red', test2)[0]) // 注意里面的 [0]，不然打印出来的是 NodeList 节点数组\n\n// 测试 parent\nconsole.log(dom.parent(dom.find('#test')[0]))\n\n// 测试 siblings\nlog(dom.siblings(dom.find('#s2')[0]))\n\n// 测试 next\n// log(dom.next(s2)) // 错误，是文本节点\nlog(dom.next(s2))\nlog(dom.next(dom.find('#s3')[0]))\n\n// 测试 previous \nlog(dom.previous(s2))\n\n// 测试 each\nconst t = dom.find('#travel')[0]\nlog(t)\ndom.each(dom.children(t), (n)=>dom.style(n, 'color', 'yellow'))\n\n// 测试 index \nlog(dom.index(s2)) // 第 1 个"]}